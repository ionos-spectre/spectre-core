#!/usr/bin/ruby

require_relative '../lib/spectre'

config_overrides = {
  'log_file' => './logs/spectre_<date>.log',
}

options = OptionParser.new do |opts|
  opts.banner = <<~BANNER
    Spectre #{Spectre::VERSION}

    Usage: spectre [command] [options]

      Commands:
        run         Run specs (default)
        list        List specs
        info        Print detailed info about specs, like file location
        mixins      Lists all mixin names
        show        Print current environment settings
        dump        Dumps the given environment in YAML format to console
        cleanup     Will remove all generated files (e.g. logs and reports)
        init        Initializes a new spectre project

      Specific options:
  BANNER

  opts.on('-s SPEC,SPEC', '--specs SPEC,SPEC', Array, 'The specs to run') do |specs|
    config_overrides['specs'] = specs
  end

  opts.on('-t TAG,TAG', '--tags TAG,TAG', Array, 'Run only specs with given tags') do |tags|
    config_overrides['tags'] = tags
  end

  opts.on('-e NAME', '--env NAME', 'Name of the environment to load') do |env_name|
    config_overrides['selected_env'] = env_name
  end

  opts.on('-c FILE', '--config FILE', 'Config file to load') do |file_path|
    config_overrides['config_file'] = file_path
  end

  opts.on('--spec-pattern PATTERN', Array, 'File pattern for spec files') do |spec_pattern|
    config_overrides['spec_patterns'] = spec_pattern
  end

  opts.on('--env-pattern PATTERN', Array, 'File pattern for environment files') do |env_patterns|
    config_overrides['env_patterns'] = env_patterns
  end

  opts.on('--ignore-failure', 'Always exit with code 0') do
    config_overrides['ignore_failure'] = true
  end

  opts.on('--formatter NAME', 'Use specified formatter') do |class_name|
    config_overrides['formatter'] = class_name
  end

  opts.on('--reporter NAME', 'Use specified reporter') do |class_name|
    config_overrides['reporter'] = class_name
  end

  # opts.on('--json', 'Use JSON formatter') do
  #   Spectre::CONFIG['formatter'] = 'Spectre::JsonFormatter'
  # end

  opts.on('--no-log', 'Disable file logging') do
    config_overrides['log_file'] = StringIO.new
  end

  opts.on('-o PATH', '--out PATH', 'Output directory path') do |path|
    config_overrides['out_path'] = File.absolute_path(path)
  end

  opts.on('-m MODULE,MODULE', '--modules MODULE,MODULE', Array, 'Load the given modules') do |modules|
    config_overrides['modules'] += modules
  end

  opts.on('-d', '--debug', 'Run in debug mode. Do not use in production!') do
    config_overrides['debug'] = true
  end

  opts.on('-p KEY=VAL',
          '--property KEY=VAL',
          'Override config option. Use `spectre show` to get list of available options') do |option|
    index = option.index('=')
    key = option[0...index]
    val = option[index + 1..]

    val = val.split(',') if Spectre::CONFIG[key].is_a? Array
    val = ['true', '1'].include? val if [true, false].include?(Spectre::CONFIG[key])
    val = val.to_i if Spectre::CONFIG[key].is_a? Integer

    opt_path = key.split('.')

    curr_opt = config_overrides

    opt_path.each_with_index do |part, i|
      if i == opt_path.count - 1
        curr_opt[part] = val
        break
      end

      curr_opt[part] = {} unless curr_opt.key?(part)
      curr_opt = curr_opt[part]
    end
  end

  opts.separator "\n  Common options:"

  opts.on_tail('-v', '--version', 'Print current installed version') do
    puts Spectre::VERSION
    exit
  end

  opts.on_tail('-h', '--help', 'Print this help') do
    puts opts
    exit
  end
end

# Parse options and get action
action = options.parse!.first || 'run'

# Expose spectre methods
%i[env describe mixin resources debug info warn log].each do |method|
  Kernel.define_method(method) do |*args, &block|
    Spectre.send(method, *args, &block)
  end
end

# Expose run context methods
%i[assert expect bag observe success? skip].each do |method|
  Kernel.define_method(method) do |*args, &block|
    Spectre::RunContext.current.send(method, *args, &block)
  end
end

# Expose helper methods
%i[uuid now].each do |method|
  Kernel.define_method(method) do |*args, &block|
    Spectre::Helpers.send(method, *args, &block)
  end
end

# Setup spectre
Spectre.setup(config_overrides)

case action
when 'list'
  Spectre.formatter.list(Spectre.list)
when 'info'
  Spectre.formatter.details(Spectre.list)
when 'run'
  runs = Spectre.run
  Spectre.report(runs)
when 'show'
  puts Spectre::CONFIG.pretty
when 'mixins'
  puts Spectre::MIXINS.keys
when 'cleanup'
  Spectre.cleanup
when 'init'
  DEFAULT_SPECTRE_CFG = <<~CONTENT
    log_file: ./logs/spectre_<date>.log
    env_patterns:
      - './environments/**/*.env.yml'
    env_partial_patterns:
      - './environments/**/*.env.secret.yml'
    spec_patterns:
      - './specs/**/*.spec.rb'
    mixin_patterns:
      - '../common/**/*.mixin.rb'
      - './mixins/**/*.mixin.rb'
    resource_paths:
      - '../common/resources'
      - './resources'
  CONTENT

  DEFAULT_ENV_CFG = <<~CONTENT
    cert: &cert ./resources/<root_cert>.cer
    http:
      <http_client_name>:
        base_url: http://localhost:5000/api/v1/
        # basic_auth:
          # username: <username>
          # password:
    # ssh:
      # <ssh_client_name>:
        # host: <hostname>
        # username: <username>
        # password: <password>
  CONTENT

  DEFAULT_ENV_SECRET_CFG = <<~CONTENT
    http:
      <http_client_name>:
        # basic_auth:
          # username: <username>
          # password: <password>
  CONTENT

  SAMPLE_SPEC = <<~CONTENT
    describe '<subject>' do
      it 'does some http requests', tags: [:sample] do
        log 'doing some http request'

        http '<http_client_name>' do
          method 'GET'
          auth 'basic'
          path 'path/to/resource'
          param 'id', 4295118773
          param 'foo', 'bar'
          header 'X-Correlation-Id', '4c2367b1-bfee-4cc2-bdc5-ed17a6a9dd4b'
          header 'Range', 'bytes=500-999'
          json({
            "message": "Hello Spectre!"
          })
        end

        assert response.code.to be 200

        assert 'the correct data to be returned' do
          report failure 'message not correct' unless respone.json.message == 'Hello World!'
          report failure 'incorrect number' unless respone.json.number == 42
        end
      end
    end
  CONTENT

  DEFAULT_GITIGNORE = <<~CONTENT
    *.code-workspace
    logs/
    reports/
    **/environments/*.env.secret.yml
  CONTENT

  DEFAULT_GEMFILE = <<~CONTENT
    source 'https://rubygems.org'

    gem 'spectre-core'
    gem 'spectre-http'
    # gem 'spectre-mysql'
    # gem 'spectre-ssh'
    # gem 'spectre-ftp'
    # gem 'spectre-curl'
    # gem 'spectre-git'
    # gem 'spectre-rabbitmq'
    # gem 'spectre-reporter-junit'
    # gem 'spectre-reporter-vstest'
    # gem 'spectre-reporter-html'
  CONTENT

  DEFAULT_FILES = [
    ['./environments/default.env.yml', DEFAULT_ENV_CFG],
    ['./environments/default.env.secret.yml', DEFAULT_ENV_SECRET_CFG],
    ['./specs/sample.spec.rb', SAMPLE_SPEC],
    ['./spectre.yml', DEFAULT_SPECTRE_CFG],
    ['./.gitignore', DEFAULT_GITIGNORE],
    ['./Gemfile', DEFAULT_GEMFILE],
  ]

  %w[environments logs modules reports resources specs].each do |dir_name|
    Dir.mkdir(dir_name) unless File.directory? dir_name
  end

  DEFAULT_FILES.each do |file, content|
    File.write(file, content) unless File.exist? file
  end
else
  puts "unknown action #{action.inspect}\n".red
  puts options
  exit 1
end
