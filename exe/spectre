#!/usr/bin/ruby

require_relative '../lib/spectre'
require_relative '../lib/spectre/expectation'

FAILED_FILENAME = '.failed'

config_overrides = {
  'log_file' => './logs/spectre_<date>.log',
}

cleanup = false
run_failed = false

options = OptionParser.new do |opts|
  opts.banner = <<~BANNER
    Spectre #{Spectre::VERSION}

    Usage: spectre [command] [options]

      Commands:
        run, ru           Run specs (default)
        list, li          List specs
        describe, de      Print all subject descriptions
        specs, sp         Print detailed information about specs
        mixins, mi        List all mixin names
        collections, co   List the loaded collections
        env, en           Print current environment settings
        cleanup, cl       Will remove all generated files (e.g. logs and reports)
        init, in          Initialize a new spectre project

      Specific options:
  BANNER

  opts.on('-s SPEC,SPEC', '--specs SPEC,SPEC', Array, 'The specs to run') do |specs|
    config_overrides['specs'] = specs
  end

  opts.on('-t TAG,TAG', '--tags TAG,TAG', Array, 'Run only specs with given tags') do |tags|
    config_overrides['tags'] = tags
  end

  opts.on('-e NAME', '--env NAME', 'Name of the environment to load') do |env_name|
    config_overrides['selected_env'] = env_name
  end

  opts.on('-c FILE', '--config FILE', 'Config file to load') do |file_path|
    config_overrides['config_file'] = file_path
  end

  opts.on('-C', '--collection NAME', 'Run or list specs of a specific collection') do |name|
    config_overrides['collection'] = name
  end

  opts.on('--work-dir PATH', 'Path of the working directory') do |path|
    config_overrides['work_dir'] = path
  end

  opts.on('--spec-patterns PATTERN', Array, 'File pattern for spec files') do |spec_pattern|
    config_overrides['spec_patterns'] = spec_pattern
  end

  opts.on('--env-patterns PATTERN', Array, 'File pattern for environment files') do |env_patterns|
    config_overrides['env_patterns'] = env_patterns
  end

  opts.on('--ignore-failure', 'Always exit with code 0') do
    config_overrides['ignore_failure'] = true
  end

  opts.on('--formatter NAME', 'Use specified formatter') do |class_name|
    config_overrides['formatter'] = class_name
  end

  opts.on('--reporter NAME', 'Use specified reporter') do |class_name|
    config_overrides['reporter'] = class_name
  end

  opts.on('--json', 'Use JSON formatter') do
    Spectre::CONFIG['formatter'] = 'Spectre::JsonFormatter'
    Spectre::CONFIG['reporters'] = ['Spectre::JsonReporter']
  end

  opts.on('--failed', 'Run previously failed specs') do
    run_failed = true

    next if config_overrides.key? 'specs' or
            config_overrides.key? 'tags' or
            config_overrides.key? 'collection'

    if File.exist?(FAILED_FILENAME)
      config_overrides['specs'] = File
        .readlines(FAILED_FILENAME)
        .map(&:strip)
    end
  end

  opts.on('--no-log', 'Disable file logging') do
    config_overrides['log_file'] = StringIO.new
  end

  opts.on('--cleanup', 'Remove generated file before running specs') do
    cleanup = true
  end

  opts.on('-o PATH', '--out PATH', 'Output directory path') do |path|
    config_overrides['out_path'] = File.absolute_path(path)
  end

  opts.on('-m MODULE,MODULE', '--modules MODULE,MODULE', Array, 'Load the given modules') do |modules|
    config_overrides['modules'] += modules
  end

  opts.on('-d', '--debug', 'Run in debug mode. Do not use in production!') do
    require 'debug'
    config_overrides['debug'] = true
  end

  opts.on('-p KEY=VAL',
          '--property KEY=VAL',
          'Override config option. Use `spectre show` to get list of available options') do |option|
    index = option.index('=')
    key = option[0...index]
    val = option[index + 1..]

    val = val.split(',') if Spectre::CONFIG[key].is_a? Array
    val = ['true', '1'].include? val if [true, false].include?(Spectre::CONFIG[key])
    val = val.to_i if Spectre::CONFIG[key].is_a? Integer

    opt_path = key.split('.')

    curr_opt = config_overrides

    opt_path.each_with_index do |part, i|
      if i == opt_path.count - 1
        curr_opt[part] = val
        break
      end

      curr_opt[part] = {} unless curr_opt.key?(part)
      curr_opt = curr_opt[part]
    end
  end

  opts.separator "\n  Common options:"

  opts.on_tail('-v', '--version', 'Print current installed version') do
    puts Spectre::VERSION
    exit
  end

  opts.on_tail('-h', '--help', 'Print this help') do
    puts opts
    exit
  end
end

# Parse options and get action
action = options.parse!.shift || 'run'

# Setup spectre
engine = Spectre::Engine.new(config_overrides)

case action
when 'list', 'li', 'ls'
  engine.formatter.list(engine.list)
when 'specs', 'sp'
  engine.formatter.details(engine.list)
when 'describe', 'de'
  engine.formatter.describe(engine.contexts)
when 'run', 'ru'
  engine.cleanup if cleanup
  runs = engine.run
  exit if runs.nil?

  if run_failed and runs.any? { |x| x.status != :success }
    File.write('.failed', runs
      .select do |x|
        x.type == :spec and
          x.status != :success
      end
      .map(&:name)
      .join("\n"))
  end

  puts
  engine.report(runs)
when 'env', 'en'
  puts engine.config.pretty
when 'mixins', 'mi', 'mx'
  search = ARGV.first
  mixins = engine.mixins.select { |x| search.nil? or x.include? search }
  engine.formatter.mixins(mixins)
when 'collections', 'co'
  puts engine.collections.pretty
when 'cleanup', 'cl'
  engine.cleanup
when 'init', 'in'
  DEFAULT_SPECTRE_CFG = <<~CONTENT
    log_file: ./logs/spectre_<date>.log
    env_patterns:
      - './environments/**/*.env.yml'
    env_partial_patterns:
      - './environments/**/*.env.secret.yml'
    spec_patterns:
      - './specs/**/*.spec.rb'
    mixin_patterns:
      - '../common/**/*.mixin.rb'
      - './mixins/**/*.mixin.rb'
    resource_paths:
      - '../common/resources'
      - './resources'
  CONTENT

  DEFAULT_ENV_CFG = <<~CONTENT
    # Set the environment name.
    # This property is optional. If not set, the environment name is "default"
    name: default

    # Define reusable variables
    # See https://yaml.org/spec/1.2.2/#anchors-and-aliases
    cert: &cert ./resources/<root_cert>.cer

    # Define HTTP client configs used by the `http` module
    http:
      <http_client_name>:
        # Set the base URL of the API for the client to use
        base_url: http://localhost:5000/api/v1/

        # Set a custom CA certificate for server cert validation
        cert: *cert

        # You can set a path to an OpenAPI spec.
        # This can be a file or a URL.
        # Request options can then be set by the `endpoint` method
        # which refers to the operation ID of the OpenAPI endpoint
        # openapi: [https://localhost:5000]/doc/openapi.json

        # Define basicauth authentication here
        # Do NOT put credentials in this file.
        # Use the `*.env.secret.yml` files instead
        # basic_auth:
        #   username: <username>
        #   password:
  CONTENT

  DEFAULT_ENV_SECRET_CFG = <<~CONTENT
    # Define sensitive data here and do NOT commit this file in version control
    some_secret: thisissensitivedata

    http:
      <http_client_name>:
        # basic_auth:
        #   username: <username>
        #   password: <password>
  CONTENT

  SAMPLE_SPEC = <<~CONTENT
    # Define a test subject. This can be the name of the component
    # or the name of a specific feature or requirement.
    describe '<subject>' do
      it 'does some http requests', tags: [:sample] do
        # Use log messages to describe processes
        log 'doing some http request'

        # Use external or custom module
        http '<http_client_name>' do
          # To request a specific endpoint, predefined endpoints
          # or openapi operations can be used...
          # endpoint 'getSomeResource'

          # ... or define a request in short form...
          get 'api/v1/some-resource/{resourceId}'

          # ... or use explicit method and path settings
          # method 'GET'
          # path 'api/v1/some-resource/{resourceId}'

          # Set route parameter
          with resourceId: 42

          # Set query parameters. This method can
          # be called multiple times.
          query id: 4295118773,
                foo: 'bar'

          # Set request headers
          header 'X-Correlation-Id', '4c2367b1-bfee-4cc2-bdc5-ed17a6a9dd4b'
          header 'Range', 'bytes=500-999'

          # Set request body as JSON.
          # This call also sets `application/json` content type.
          json({
            "message": "Hello Spectre!"
          })
        end

        # Expect conditions in a single line
        # If the check fails, the run will continue
        expect(response.headers['X-Correlation-Id']).not to be empty

        # Assert conditions in a single line...
        # If an assertion fails, the run will be aborted
        assert response.code.to be 200

        # ...or assert multiple conditions in a block
        # All conditions within this block will be evaluated.
        # After the block finishes and a failure was reported,
        # the run will be aborted.
        # When using `expect` instead of `assert` the run will continue.
        assert 'the correct data to be returned' do
          report failure 'message not correct' unless respone.json.message == 'Hello World!'
          report failure 'incorrect number' unless respone.json.number == 42
        end
      end
    end
  CONTENT

  DEFAULT_GITIGNORE = <<~CONTENT
    *.code-workspace
    logs/
    reports/
    **/environments/*.env.secret.yml
  CONTENT

  DEFAULT_GEMFILE = <<~CONTENT
    source 'https://rubygems.org'

    gem 'spectre-core'
    gem 'spectre-http'
    # gem 'spectre-mysql'
    # gem 'spectre-ssh'
    # gem 'spectre-ftp'
    # gem 'spectre-curl'
    # gem 'spectre-git'
    # gem 'spectre-rabbitmq'
    # gem 'spectre-reporter-junit'
    # gem 'spectre-reporter-vstest'
    # gem 'spectre-reporter-html'
  CONTENT

  DEFAULT_FILES = [
    ['./environments/default.env.yml', DEFAULT_ENV_CFG],
    ['./environments/default.env.secret.yml', DEFAULT_ENV_SECRET_CFG],
    ['./specs/sample.spec.rb', SAMPLE_SPEC],
    ['./spectre.yml', DEFAULT_SPECTRE_CFG],
    ['./.gitignore', DEFAULT_GITIGNORE],
    ['./Gemfile', DEFAULT_GEMFILE],
  ]

  %w[environments logs modules reports resources specs].each do |dir_name|
    Dir.mkdir(dir_name) unless File.directory? dir_name
  end

  DEFAULT_FILES.each do |file, content|
    File.write(file, content) unless File.exist? file
  end
else
  puts "unknown action #{action.inspect}\n".red
  puts options
  exit 1
end
