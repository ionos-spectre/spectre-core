require_relative '../lib/spectre'

config_overrides = {}

OptionParser.new do |opts|
  opts.banner = <<~BANNER
    Spectre #{Spectre::VERSION}

    Usage: spectre [command] [options]

      Commands:
        run         Run specs (default)
        list        List specs
        show        Print current environment settings
        dump        Dumps the given environment in YAML format to console
        cleanup     Will remove all generated files (e.g. logs and reports)
        init        Initializes a new spectre project

      Specific options:
  BANNER

  opts.on('-s SPEC,SPEC', '--specs SPEC,SPEC', Array, 'The specs to run') do |specs|
    Spectre::CONFIG['specs'] = specs
  end

  opts.on('-t TAG,TAG', '--tags TAG,TAG', Array, 'Run only specs with given tags') do |tags|
    Spectre::CONFIG['tags'] = tags
  end

  opts.on('-e NAME', '--env NAME', 'Name of the environment to load') do |env_name|
    Spectre::CONFIG['selected_env'] = env_name
  end

  opts.on('-c FILE', '--config FILE', 'Config file to load') do |file_path|
    Spectre::CONFIG['config_file'] = file_path
  end

  opts.on('--spec-pattern PATTERN', Array, 'File pattern for spec files') do |spec_pattern|
    Spectre::CONFIG['spec_patterns'] = spec_pattern
  end

  opts.on('--env-pattern PATTERN', Array, 'File pattern for environment files') do |env_patterns|
    Spectre::CONFIG['env_patterns'] = env_patterns
  end

  opts.on('--ignore-failure', 'Always exit with code 0') do
    Spectre::CONFIG['ignore_failure'] = true
  end

  opts.on('--formatter NAME', 'Use specified formatter') do |class_name|
    Spectre::CONFIG['formatter'] = class_name
  end

  opts.on('--json', 'Use JSON formatter') do
    Spectre::CONFIG['formatter'] = 'Spectre::JsonFormatter'
  end

  opts.on('-o PATH', '--out PATH', 'Output directory path') do |path|
    Spectre::CONFIG['out_path'] = File.absolute_path(path)
  end

  opts.on('-m MODULE,MODULE', '--modules MODULE,MODULE', Array, "Load the given modules") do |modules|
    Spectre::CONFIG['modules'] += modules
  end

  opts.on('-d', '--debug', "Run in debug mode. Do not use in production!") do
    Spectre::CONFIG['debug'] = true
  end

  opts.on('-p KEY=VAL', '--property KEY=VAL', "Override config option. Use `spectre show` to get list of available options") do |option|
    index = option.index('=')
    key = option[0...index]
    val = option[index+1..-1]

    val = val.split(',') if Spectre::CONFIG[key].is_a? Array
    val = ['true', '1'].include? val if [true, false].include?(Spectre::CONFIG[key])
    val = val.to_i if Spectre::CONFIG[key].is_a? Integer

    opt_path = key.split('.')

    curr_opt = config_overrides

    opt_path.each_with_index do |part, i|
      if i == opt_path.count-1
        curr_opt[part] = val
        break
      end

      curr_opt[part] = {} unless curr_opt.key?(part)
      curr_opt = curr_opt[part]
    end
  end

  opts.separator "\n  Common options:"

  opts.on_tail('-v', '--version', 'Print current installed version') do
    puts Spectre::VERSION
    exit
  end

  opts.on_tail('-h', '--help', 'Print this help') do
    puts opts
    exit
  end
end.parse!

# Expose spectre methods
%i{env describe bag mixin resources}.each do |method|
  define_method(method) do |*args, &block|
    Spectre.send(method, *args, &block)
  end
end


%i{debug info warn}.each do |method|
  define_method(method) do |*args, &block|
    Spectre.logger.send(method, *args, &block)
  end
end

%i{be be_empty contain match}.each do |method|
  define_method(method) do |*args, &block|
    Spectre::Expectation.send(method, *args, &block)
  end
end

# Setup spectre
Spectre.setup(config_overrides)

# Determine action
action = ARGV[0] || 'run'

# List specs
if action == 'list'
  Spectre.logger.class.list
end

# Run specs
if action == 'run'
  runs = Spectre.run
  Spectre.report(runs)
end

if action == 'show'
  puts Spectre::CONFIG.pretty
end


DEFAULT_SPECTRE_CFG = %{log_file: ./logs/spectre_<date>.log
env_patterns:
  - './environments/**/*.env.yml'
env_partial_patterns:
  - './environments/**/*.env.secret.yml'
spec_patterns:
  - './specs/**/*.spec.rb'
mixin_patterns:
  - '../common/**/*.mixin.rb'
  - './mixins/**/*.mixin.rb'
resource_paths:
  - '../common/resources'
  - './resources'
}


DEFAULT_ENV_CFG = %{cert: &cert ./resources/<root_cert>.cer
http:
  <http_client_name>:
    base_url: http://localhost:5000/api/v1/
    # basic_auth:
      # username: <username>
      # password: <password>
    # keystone:
      # url: https://<keystone_url>/main/v3/
      # username: <username>
      # password: <password>
      # project: <project>
      # domain: <domain>
      # cert: *cert
# ssh:
  # <ssh_client_name>:
    # host: <hostname>
    # username: <username>
    # password: <password>
}

DEFAULT_ENV_SECRET_CFG = %{http:
  <http_client_name>:
    # basic_auth:
      # username: <username>
      # password: <password>
    # keystone:
      # username: <username>
      # password: <password>
# ssh:
  # <ssh_client_name>:
    # username: <username>
    # password: <password>
}

SAMPLE_SPEC = %[describe '<subject>' do
  it 'does some http requests', tags: [:sample] do
    log 'doing some http request'

    http '<http_client_name>' do
      auth 'basic'
      # auth 'keystone'
      method 'GET'
      path 'path/to/resource'
      param 'id', 4295118773
      param 'foo', 'bar'
      header 'X-Correlation-Id', '4c2367b1-bfee-4cc2-bdc5-ed17a6a9dd4b'
      header 'Range', 'bytes=500-999'
      json({
        "message": "Hello Spectre!"
      })
    end

    expect 'the response code to be 200' do
      response.code.should_be 200
    end

    expect 'a message to exist' do
      response.json.message.should_not_be_empty
    end
  end
end
]

DEFAULT_GITIGNORE = %[*.code-workspace
logs/
reports/
**/environments/*.env.secret.yml
]

DEFAULT_GEMFILE = %[source 'https://rubygems.org'

gem 'spectre-core', '>= #{Spectre::VERSION}'
# gem 'spectre-mysql', '>= 2.0.0'
# gem 'spectre-ssh', '>= 2.0.0'
# gem 'spectre-ftp', '>= 2.0.0'
# gem 'spectre-curl', '>= 2.0.0'
# gem 'spectre-git', '>= 2.0.0'
# gem 'spectre-rabbitmq', '>= 2.0.0'
# gem 'spectre-reporter-junit', '>= 2.0.0'
# gem 'spectre-reporter-vstest', '>= 2.0.0'
# gem 'spectre-reporter-html', '>= 2.0.0'
]

if 'init' == action
  DEFAULT_FILES = [
    ['./environments/default.env.yml', DEFAULT_ENV_CFG],
    ['./environments/default.env.secret.yml', DEFAULT_ENV_SECRET_CFG],
    ['./specs/sample.spec.rb', SAMPLE_SPEC],
    ['./spectre.yml', DEFAULT_SPECTRE_CFG],
    ['./.gitignore', DEFAULT_GITIGNORE],
    ['./Gemfile', DEFAULT_GEMFILE],
  ]

  %w(environments logs specs).each do |dir_name|
    Dir.mkdir(dir_name) unless File.directory? dir_name
  end

  DEFAULT_FILES.each do |file, content|
    unless File.exist? file
      File.write(file, content)
    end
  end
end
