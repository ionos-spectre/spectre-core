= Spectre


== Developing Modules

Custom modules can be written as a local file in your +Spectre+ project, 
typically placed in the +modules+ directory or as an GEM package published
to an official GEM repository.


=== Writing the Module

Create a new file +greetings.rb+ in the +modules+ directory (or in an extra repository) 
and add the following content.

  module Spectre
    module MyModule
      # Define a default config for your module to operate on
      DEFAULT_CONFIG = {
        'message' => 'Hello',
      }

      # Create a class to provide some function
      # for manipulating the config at runtime
      # in scope of your module
      class Greetings
        def initialize config
          @config = config
        end

        # Provide some function to manipulate the config ad runtime
        def message text
          @config['message'] = text
        end
      end

      class Greeter
        # Define a contructor which takes a Spectre config
        # and a usual logger instance as arguments
        def initialize config, logger
          @config = config['greeter']
          @logger = logger
        end

        def greetings name, &block
          # Get the specific options with given name
          # from the config hash, if the given name is present
          if @config.key? name
            config = @config[name]
          else
            # Otherwise use an empty hash, when module is used as standalone
            # or there is no config present for this name
            config = {}
          end

          # Instanciate your configuration class
          # and call +instance_eval+ to "expose" those function
          Greetings.new(config).instance_eval(&block)

          # Merge the default config with the given one
          # in order to ensure all required values are present
          config = DEFAULT_CONFIG.merge(config)

          # Do your logic with the config
          puts "#{config['message']} #{config['name']}!"
        end
      end
    end

    # Register the class and it's method in the +Spectre::Engine+
    # So the methods are available "globally" when using it within Spectre
    Engine.register(MyModule::Greeter, :greetings) if defined? Engine
  end

The module can then be used standalone in any Ruby file.

  greetings 'World' do
    message 'Konnichiwa'
  end
  # Konnichiwa World!

  greetings 'World'
  # Hello World!


=== Configuring the Module

When using your module with +Spectre+ add a section to an environment file 
+default.env.yml+ and add the +greetings.rb+ to the +modules+ list.

  greeter:
    first_greeting:
      name: World

  modules:
   - ./greetings.rb


=== Using the Module

or within +greegings.spec.rb+ executed with +Spectre+

  describe 'Greeting' do
    it 'greets with a name' do
      greetings 'first_greeting' do
        message 'Ohayou'
      end
      # Ohayou World!

      greetings 'first_greeting'
      # Hello World!
    end
  end
